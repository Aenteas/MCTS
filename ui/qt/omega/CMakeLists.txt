# This file has been generated by scripts/generate_cmake.py

project(omega)

# export public include directory path
# we are using INSTALL(DIRECTORY) in the top level CMakeLists.txt file so we need to include the folder ui as well.
# include/ui/qt/omega/*.h -> <install_prefix>/include/ui/qt/omega/*.h
set(INCLUDE_DIRS "${INCLUDE_DIRS};${CMAKE_CURRENT_SOURCE_DIR}/include/ui" CACHE INTERNAL "")

# you can not use alias for install targets but the name should be unique so we use a namespace variable
# see https://stackoverflow.com/questions/67757157/change-exported-target-name-in-cmake-install-alias-to-a-target
set(NS ${MAIN_PROJECT}.ui.qt.omega.)
# Global include directory
include_directories(${ROOT_BINARY_DIR}/include)

# create shared libraries
# interface library to provide path to the include dir
add_library(${NS}INTERFACE INTERFACE)
add_library(ui.qt.omega.INTERFACE ALIAS ${NS}INTERFACE)

set(TARGETS "${TARGETS};${NS}INTERFACE" CACHE INTERNAL "")

target_include_directories(${NS}INTERFACE
  INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)

file(GLOB SOURCES "src/*.cpp")
foreach(SOURCE ${SOURCES})
  cmake_path(GET SOURCE STEM NAME)
  add_library(${NS}${NAME} SHARED include/ui/qt/omega/${NAME}.h src/${NAME}.cpp)
  add_library(ui.qt.omega.${NAME} ALIAS ${NS}${NAME})
  # add to the exported targets
  set(TARGETS "${TARGETS};${NS}${NAME}" CACHE INTERNAL "")

  target_include_directories(${NS}${NAME} 
    PUBLIC
      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
      $<INSTALL_INTERFACE:include>
    PRIVATE
      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/ui/qt/omega>
      $<INSTALL_INTERFACE:include/ui/qt/omega>
  )
endforeach()

# create executables
file(GLOB EXES "apps/*.cpp")
foreach(EXE ${EXES})
  cmake_path(GET EXE STEM NAME)
  add_executable(${NS}${NAME} apps/${NAME}.cpp)
  target_include_directories(${NS}${NAME} 
    PRIVATE
      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/ui/qt/omega>
      $<INSTALL_INTERFACE:include/ui/qt/omega>
  )
endforeach()

# create qt libraries
file(GLOB QTFILES "src/*.ui")
foreach(QTFILE ${QTFILES})
  cmake_path(GET QTFILE STEM NAME)
  add_library(ui_${NAME} src/${NAME}.ui)
endforeach()

file(GLOB QTFILES "apps/*.ui")
foreach(QTFILE ${QTFILES})
  cmake_path(GET QTFILE STEM NAME)
  add_library(ui_${NAME} apps/${NAME}.ui)
endforeach()

# link libraries
target_link_libraries(${NS}hexagon
    PUBLIC
      Qt5::Gui

      m

)

if(USE_UI_QT_OMEGA)
  target_link_libraries(${NS}mainwindow
    PUBLIC
      ui.qt.omega.boarddialog
  )
endif()

target_link_libraries(${NS}mainwindow
    PRIVATE
      Qt5::Widgets
      ui_mainwindow
)

if(USE_UI_QT_OMEGA)
  target_link_libraries(${NS}mainwindow
    PUBLIC
      ui.qt.omega.boarddialog
  )
endif()

target_link_libraries(${NS}mainwindow
    PRIVATE
      Qt5::Widgets
      ui_mainwindow
)

if(USE_ENGINE_BOT_BASE)
  target_link_libraries(${NS}boarddialog
    PUBLIC
      engine.bot.base.aibotbase
  )
endif()

if(USE_ENGINE_BOT_MCTS)
  target_link_libraries(${NS}boarddialog
    PUBLIC
      engine.bot.mcts.mctsbot
  )
endif()

if(USE_ENGINE_BOT_RANDOM)
  target_link_libraries(${NS}boarddialog
    PUBLIC
      engine.bot.random.randombot
  )
endif()

if(USE_UI_QT_OMEGA)
  target_link_libraries(${NS}boarddialog
    PUBLIC
      ui.qt.omega.qtbotwrapper
  )
endif()

if(USE_UI_QT_OMEGA)
  target_link_libraries(${NS}boarddialog
    PUBLIC
      ui.qt.omega.canvas
  )
endif()

target_link_libraries(${NS}boarddialog
    PUBLIC
      Qt5::Core
    PRIVATE
      Qt5::Widgets
      ui_boarddialog
)

if(USE_ENGINE_BOT_BASE)
  target_link_libraries(${NS}qtbotwrapper
    PUBLIC
      engine.bot.base.aibotbase
  )
endif()

target_link_libraries(${NS}qtbotwrapper
    PUBLIC
      Qt5::Core
)

if(USE_ENGINE_BOT_BASE)
  target_link_libraries(${NS}boarddialog
    PUBLIC
      engine.bot.base.aibotbase
  )
endif()

if(USE_ENGINE_BOT_MCTS)
  target_link_libraries(${NS}boarddialog
    PUBLIC
      engine.bot.mcts.mctsbot
  )
endif()

if(USE_ENGINE_BOT_RANDOM)
  target_link_libraries(${NS}boarddialog
    PUBLIC
      engine.bot.random.randombot
  )
endif()

if(USE_UI_QT_OMEGA)
  target_link_libraries(${NS}boarddialog
    PUBLIC
      ui.qt.omega.qtbotwrapper
  )
endif()

if(USE_UI_QT_OMEGA)
  target_link_libraries(${NS}boarddialog
    PUBLIC
      ui.qt.omega.canvas
  )
endif()

target_link_libraries(${NS}boarddialog
    PUBLIC
      Qt5::Core
    PRIVATE
      Qt5::Widgets
      ui_boarddialog
)

if(USE_UI_QT_OMEGA)
  target_link_libraries(${NS}canvas
    PUBLIC
      ui.qt.omega.hexagon
  )
endif()

if(USE_ENGINE_GAME_OMEGA)
  target_link_libraries(${NS}canvas
    PUBLIC
      engine.game.omega.omega
  )
endif()

target_link_libraries(${NS}canvas
    PUBLIC
      Qt5::Widgets

)

if(USE_UI_QT_OMEGA)
  target_link_libraries(${NS}main
    PRIVATE
      ui.qt.omega.mainwindow
  )
endif()

